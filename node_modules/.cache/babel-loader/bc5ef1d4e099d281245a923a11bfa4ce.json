{"remainingRequest":"E:\\拷贝\\案例2\\class3\\day15\\node_modules\\thread-loader\\dist\\cjs.js!E:\\拷贝\\案例2\\class3\\day15\\node_modules\\babel-loader\\lib\\index.js!E:\\拷贝\\案例2\\class3\\day15\\src\\plugins\\axios.js","dependencies":[{"path":"E:\\拷贝\\案例2\\class3\\day15\\src\\plugins\\axios.js","mtime":1583929521729},{"path":"E:\\拷贝\\案例2\\class3\\day15\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1583661023469},{"path":"E:\\拷贝\\案例2\\class3\\day15\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1583661001014},{"path":"E:\\拷贝\\案例2\\class3\\day15\\node_modules\\babel-loader\\lib\\index.js","mtime":1583661145674}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport axios from 'axios';\nimport Vue from 'vue';\nimport router from \"./router.js\";\nimport vm from \"../main.js\"; //添加一个请求的拦截器\n\naxios.interceptors.request.use(function (config) {\n  console.log('请求时拦截器'); //config 含有发出的请求的配置信息  axios(config)\n  // 请求发出之前做点事  请求体里面 每次都自动携带token\n\n  var token = window.localStorage.getItem('user');\n  token = token ? JSON.parse(window.localStorage.getItem('user')).token : '';\n  config.headers = {\n    token: token //控制loading显示\n\n  };\n  vm.bLoading = true;\n  return config; // 撒手放出经过配置的请求\n}, function (error) {\n  // 发出了错误的请求，拦截\n  return Promise.reject(error);\n}); // 添加一个响应的拦截器\n\naxios.interceptors.response.use(function (response) {\n  console.log('响应时拦截器', response.data.err); //response  ~~ axios请求后的res\n  //控制loading显示\n\n  vm.bLoading = false; // 响应数据回来后，到达目标组件之前，做点事   res.status   res.data.err == 2\n  //校验返回数据，token过期，路由跳转login,传递当前路由地址\n\n  var currentRoute = router.currentRoute.fullPath; //获取当前路由全路径，string\n\n  if (response.data.err === 2 && !currentRoute.includes('/login')) {\n    router.replace({\n      path: '/login',\n      query: {\n        p: currentRoute\n      }\n    });\n  }\n\n  return response; //奔向组件\n}, function (error) {\n  // 错误的响应，拦截\n  return Promise.reject(error);\n});\nVue.prototype.$axios = axios;\nwindow.axios = axios;\nexport default axios;",{"version":3,"sources":["E:\\拷贝\\案例2\\class3\\day15\\src\\plugins\\axios.js"],"names":["axios","Vue","router","vm","interceptors","request","use","config","console","log","token","window","localStorage","getItem","JSON","parse","headers","bLoading","error","Promise","reject","response","data","err","currentRoute","fullPath","includes","replace","path","query","p","prototype","$axios"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP;AACA,OAAOC,EAAP,mB,CACA;;AACAH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAASC,MAAT,EAAiB;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAD8C,CAE9C;AAEA;;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAZ;AACAH,EAAAA,KAAK,GAAGA,KAAK,GAAGI,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAX,EAAgDH,KAAnD,GAA2D,EAAxE;AACAH,EAAAA,MAAM,CAACS,OAAP,GAAe;AACbN,IAAAA,KAAK,EAAEA,KADM,CAIf;;AAJe,GAAf;AAKAP,EAAAA,EAAE,CAACc,QAAH,GAAY,IAAZ;AACA,SAAOV,MAAP,CAb8C,CAahC;AACf,CAdD,EAcG,UAASW,KAAT,EAAgB;AACjB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAjBD,E,CAmBA;;AACAlB,KAAK,CAACI,YAAN,CAAmBiB,QAAnB,CAA4Bf,GAA5B,CAAgC,UAASe,QAAT,EAAmB;AACjDb,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBY,QAAQ,CAACC,IAAT,CAAcC,GAAnC,EADiD,CAEjD;AAEA;;AACApB,EAAAA,EAAE,CAACc,QAAH,GAAY,KAAZ,CALiD,CAQnD;AAEA;;AACA,MAAIO,YAAY,GAAGtB,MAAM,CAACsB,YAAP,CAAoBC,QAAvC,CAXmD,CAWH;;AAChD,MAAGJ,QAAQ,CAACC,IAAT,CAAcC,GAAd,KAAoB,CAApB,IAAyB,CAACC,YAAY,CAACE,QAAb,CAAsB,QAAtB,CAA7B,EAA6D;AAC7DxB,IAAAA,MAAM,CAACyB,OAAP,CAAe;AACbC,MAAAA,IAAI,EAAC,QADQ;AAEbC,MAAAA,KAAK,EAAC;AAACC,QAAAA,CAAC,EAACN;AAAH;AAFO,KAAf;AAIC;;AAEC,SAAOH,QAAP,CAnBiD,CAmBjC;AACjB,CApBD,EAoBG,UAASH,KAAT,EAAgB;AACjB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAvBD;AAyBAjB,GAAG,CAAC8B,SAAJ,CAAcC,MAAd,GAAqBhC,KAArB;AACAW,MAAM,CAACX,KAAP,GAAaA,KAAb;AACA,eAAeA,KAAf","sourcesContent":["import axios from 'axios';\r\nimport Vue from 'vue';\r\nimport router from './router.js'\r\nimport vm from '../main.js'\r\n//添加一个请求的拦截器\r\naxios.interceptors.request.use(function(config) {\n  console.log('请求时拦截器');\n  //config 含有发出的请求的配置信息  axios(config)\n  \n  // 请求发出之前做点事  请求体里面 每次都自动携带token\n  let token = window.localStorage.getItem('user')\n  token = token ? JSON.parse(window.localStorage.getItem('user')).token : ''\n  config.headers={\n    token: token\n  }\n  \n  //控制loading显示\n  vm.bLoading=true;\n  return config;// 撒手放出经过配置的请求\n}, function(error) {\n  // 发出了错误的请求，拦截\n  return Promise.reject(error);\n});\r\n\r\n// 添加一个响应的拦截器\naxios.interceptors.response.use(function(response) {\n  console.log('响应时拦截器',response.data.err);\n  //response  ~~ axios请求后的res\n  \n  //控制loading显示\n  vm.bLoading=false;\n  \n  \n// 响应数据回来后，到达目标组件之前，做点事   res.status   res.data.err == 2\n\n//校验返回数据，token过期，路由跳转login,传递当前路由地址\nlet currentRoute = router.currentRoute.fullPath;//获取当前路由全路径，string\nif(response.data.err===2 && !currentRoute.includes('/login')){\nrouter.replace({\n  path:'/login',\n  query:{p:currentRoute}\n})\n}\n  \n  return response;//奔向组件\n}, function(error) {\n  // 错误的响应，拦截\n  return Promise.reject(error);\n});\n\nVue.prototype.$axios=axios;\nwindow.axios=axios;\nexport default axios;"]}]}